Single Element in a Sorted Array

You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once. Find this single element that appears only once.

 

Example 1:

Input: [1,1,2,3,3,4,4,8,8]
Output: 2
Example 2:

Input: [3,3,7,7,10,11,11]
Output: 10
 

Note: Your solution should run in O(log n) time and O(1) space.

Solution:

class Solution {
    public int singleNonDuplicate(int[] nums) {
        int i =0;
        int j = nums.length-1;
        
        while(i<j){
            int mid = i+(j-i)/2;
              boolean even =  (j-mid)%2==0; 
            if(nums[mid]== nums[mid+1]){
                if(even){
                     i=mid+2;
                }
            else
                {
                j=mid-1;
            
            }
            }
               
            else if(nums[mid] == nums[mid-1]){
                if(even){
                     j=mid-2;
                }
               
                else
                    i=mid+1;
            }else
                return nums[mid];
        }
        return nums[i];
    }
}
