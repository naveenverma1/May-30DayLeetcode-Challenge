 Counting Bits

Given a non negative integer number num. For every numbers i in the range 0 ≤ i ≤ num calculate the number of 1's in their binary representation and return them as an array.

Example 1:

Input: 2
Output: [0,1,1]
Example 2:

Input: 5
Output: [0,1,1,2,1,2]
Follow up:

It is very easy to come up with a solution with run time O(n*sizeof(integer)). But can you do it in linear time O(n) /possibly in a single pass?
Space complexity should be O(n).
Can you do it like a boss? Do it without using any builtin function like __builtin_popcount in c++ or in any other language.
   Hide Hint #1  
You should make use of what you have produced already.
   Hide Hint #2  
Divide the numbers in ranges like [2-3], [4-7], [8-15] and so on. And try to generate new range from previous.
   Hide Hint #3  
Or does the odd/even status of the number help you in calculating the number of 1s?

Solution

class Solution {
    public int[] countBits(int num) {
        int[] arr = new int[num+1];
        for(int i =0;i<=num;i++){
            arr[i] = dx(i);
        }
        return arr;
    }
    public int dx(int n){
        if(n==0) return 0;
        if(n==1) return 1;
        
        if(n%2==0) return dx(n/2);
        else return 1+dx(n/2);
    }
    
}
0r-------------------------------------------------------------------------------------------------

class Solution {
    public int[] countBits(int num) {
        
        int[] arr = new int[num+1];
        for(int i =0;i<=num;i++){
            arr[i] = dx(i,arr);
        }
        return arr;
    }
    public int dx(int n,int dp[]){
        if(n==0) return 0;
        if(n==1) return 1;
        if(dp[n]!=0) return dp[n];
        
        
        if(n%2==0) {
            dp[n] = dx(n/2,dp);
            return dx(n/2,dp);
        }
        else {dp[n] = 1+dx(n/2,dp);
            return 1+dx(n/2,dp);}
    }
    
}
0r-------------------------------------------------------------------------
awesome soltion:
most upvoted soltion on leetcode ::


public int[] countBits(int num) {
    int[] f = new int[num + 1];
    for (int i=1; i<=num; i++) f[i] = f[i >> 1] + (i & 1);
    return f;
}

