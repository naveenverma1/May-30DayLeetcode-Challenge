Permutation in String

Given two strings s1 and s2, write a function to return true if s2 contains the permutation of s1. In other words, one of the first string's permutations is the substring of the second string.

 

Example 1:

Input: s1 = "ab" s2 = "eidbaooo"
Output: True
Explanation: s2 contains one permutation of s1 ("ba").
Example 2:

Input:s1= "ab" s2 = "eidboaoo"
Output: False
 

Note:

The input strings only contain lower case letters.
The length of both given strings is in range [1, 10,000].

Solution

class Solution {
    public boolean checkInclusion(String s1, String s2) {
         if (s1.length() > s2.length())
            return false;
        
        
        
        
   int[] a = new int[26];
        int[] b=  new int[26];
        
        for(int i =0;i<s1.length();i++){
            a[s1.charAt(i)-'a']++;
            b[s2.charAt(i)-'a']++;
        }
        
        for(int i =0;i<s2.length()-s1.length();i++){
            if(matches(a,b))
                return true;
            b[s2.charAt(i+s1.length())-'a']++;
            b[s2.charAt(i)-'a']--;
        }
         return matches(a,b);
    }
    public boolean matches(int[] a,int[] b){
        for(int i =0;i<26;i++){
            if(a[i]!=b[i])
                return false;
        }
          return true;
    }
  
}

------------------------------------------or-----------------------------------

class Solution {
    public boolean checkInclusion(String s1, String s2) {
       
     int[] s1map = new int[26];
         if (s1.length() > s2.length())
            return false;
       
        
        for(int i =0;i<s1.length();i++){
            s1map[s1.charAt(i)-'a']++;
        }
        for(int i =0;i<=s2.length()-s1.length();i++){
             int[] s2map = new int[26];
            for(int j=0;j<s1.length();j++){
                s2map[s2.charAt(i+j)-'a']++;
            }
              if (matches(s1map, s2map))
                return true;
        }
        return false;
        
    }
    public boolean matches(int[] a,int[] b){
        for(int i =0;i<26;i++){
            if(a[i]!=b[i])
                return false;
        }
          return true;
    }
  
  
}


---------------------------------------------------or-----------------------------------------------

class Solution {
    public boolean checkInclusion(String s1, String s2) {
       
        s1  = sort(s1);
        for(int i=0;i<=s2.length()-s1.length();i++){
            if(s1.equals(sort(s2.substring(i,i+s1.length()))))
                return true;
        }return false;
    }
    public String sort(String s){
        char[] ch =  s.toCharArray();
        Arrays.sort(ch);
        return new String(ch);
    }
}
