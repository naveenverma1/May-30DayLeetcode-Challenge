Given a string, find the first non-repeating character in it and return it's index. If it doesn't exist, return -1.

Examples:

s = "leetcode"
return 0.

s = "loveleetcode",
return 2.
Note: You may assume the string contain only lowercase letters.

Solution:

class Solution {
    public int firstUniqChar(String s) {
     	int n = s.length();
	int[]  arr  = new int[26];
	for(int  i=0;i<n;i++){
	    arr[s.charAt(i)-'a']++;
	}
	for(int  i=0;i<n;i++){
	    if (arr[s.charAt(i)-'a']==1)
	  return i;
	}return -1;
    }
}
//ororororororororororororororororororo or ororooroororororororororororoorororrororoorroororoororo
class Solution {
    public int firstUniqChar(String s) {
     		
   HashMap<Character,Integer> map = new HashMap<>();
         
         for(int i =0;i<s.length();i++){
             map.put(s.charAt(i),map.getOrDefault(s.charAt(i),0)+1);
         }
        
         for(int i =0;i<s.length();i++){
             if(map.get(s.charAt(i))==1)
           return i;
         }
        return -1;
    }
}
